import { useEffect, useState } from "react";
import { useIsMounted } from "usehooks-ts";
import { Address, usePublicClient } from "wagmi";

import { Address0x } from "../../../app/common/config/Contract-Addresses";

import { useTargetNetwork } from "./useTargetNetwork";

import contracts from "lib/scaffold-lib/contracts/externalContracts";
import {
  Contract,
  ContractCodeStatus,
  ContractName,
} from "lib/scaffold-lib/utils/scaffold-eth/contract";

/**
 * Gets the matching contract info from the contracts file generated by `yarn deploy`
 * @param contractName - name of deployed contract
 */
export const useDeployedContractInfo = <TContractName extends ContractName>(
  contractName: TContractName,
  address?: Address0x
) => {
  const isMounted = useIsMounted();
  const { targetNetwork } = useTargetNetwork();
  const deployedContract = contracts?.[
    targetNetwork.id as keyof typeof contracts
  ]?.[contractName as ContractName] as Contract<TContractName>;

  const [status, setStatus] = useState<ContractCodeStatus>(
    ContractCodeStatus.LOADING
  );
  const publicClient = usePublicClient({
    chainId: targetNetwork.id,
  });

  useEffect(() => {
    const checkContractDeployment = async () => {
      if (!deployedContract) {
        setStatus(ContractCodeStatus.NOT_FOUND);
        return;
      }
      const code = await publicClient.getBytecode({
        address: address || (deployedContract.address as Address),
      });

      if (!isMounted()) {
        return;
      }
      // If contract code is `0x` => no contract deployed on that address
      if (code === "0x") {
        setStatus(ContractCodeStatus.NOT_FOUND);
        return;
      }
      setStatus(ContractCodeStatus.DEPLOYED);
    };

    checkContractDeployment();
  }, [isMounted, contractName, deployedContract, publicClient, address]);

  return {
    data:
      status === ContractCodeStatus.DEPLOYED
        ? {
            ...deployedContract,
            address: address ? address : deployedContract.address,
          }
        : undefined,
    isLoading: status === ContractCodeStatus.LOADING,
  };
};
